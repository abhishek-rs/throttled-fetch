{"version":3,"file":"throttled-fetch.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["const fetch = require('cross-fetch');\n\n/*\nClient side throttling\nRead more at - https://sre.google/sre-book/handling-overload/\n*/\n\n/* Utils */\n\n// Remove query params to reduce the no. of unique keys in the requestsMap\nconst sanitizeUrl = (url: string) => {\n  const urlMinusQuery = url.split('?')[0];\n  return urlMinusQuery;\n};\n\nexport const diffInSeconds = (a: Date, b: Date) => {\n  return Math.round((a.valueOf() - b.valueOf()) / 1000);\n};\n\n/* --- */\n\n/* Requests' recent history store */\n\n// We need to keep the no. of requests and no. of accepted requests for the last [windowLength] seconds and disregard the rest\n// This is done here by using arrays of [windowLength] items, for every url, each representing the second that is [index] seconds away from head\n// i.e index 0 represents the head, index 1 represents 1 second ahead of the head\ninterface WindowItem {\n  requests: number;\n  accepts: number;\n  time: Date;\n}\ninterface RequestMapEntry {\n  head: Date;\n  values: Array<WindowItem>;\n}\ninterface ThrottlerOptions {\n  K: number;\n  windowLength: number; // seconds\n  cleanupFrequency: number; // seconds\n}\n\n// A place to store the requests' totalCount and acceptance count using their urls as keys\nexport const requestsMap: Map<string, RequestMapEntry> = new Map();\n\n/* --- */\n\n/* Core methods */\n\n// We need the 'time' value here for every item because a lot of these items could be outdated (out of our current window of interest),\n// as we only clean them up on a need-to-do basis when we replace an item\n// During the update phase, if we arrive at a time that is more than [windowLength] seconds from head we update the head\n// For more on update see updateRequestValues below\nconst getTwoMinuteWindow = (now: Date, windowLength: number) => ({\n  head: now,\n  values: new Array(windowLength).fill({\n    requests: 0,\n    accepts: 0,\n    time: null,\n  }),\n});\n\nlet cleanUpTaskId: NodeJS.Timer;\n\n// Returns the sum of all [requests, acceptedRequests] in the last [windowLength] second window\nexport const getRequestValues = (\n  reqWindow: RequestMapEntry,\n  now: Date,\n  windowLength: number\n) => {\n  const { values: reqValues } = reqWindow;\n  return reqValues.reduce(\n    (acc: Array<number>, { time, requests, accepts }: WindowItem) => {\n      if (time && diffInSeconds(now, time) < windowLength) {\n        return [acc[0] + requests, acc[1] + accepts];\n      }\n      return acc;\n    },\n    [0, 0]\n  );\n};\n\n// If the time we are updating for, represented by 'now', is out of the range of current head,\n// we replace the head with 'now' and set its values to the first item\n// If the time we are updating falls within the window of [head + winddowLength seconds] we update the item representing the current second\nexport const updateRequestValues = (\n  url: string,\n  now: Date,\n  windowLength: number,\n  incRequests: boolean = false,\n  incAccepts: boolean = false\n) => {\n  const requestWindow = requestsMap.get(url);\n\n  if (requestWindow) {\n    const { head, values: reqValues } = requestWindow;\n    const diffFromHead = diffInSeconds(now, head);\n\n    if (diffFromHead >= windowLength) {\n      reqValues[0] = {\n        requests: incRequests ? 1 : 0,\n        accepts: incAccepts ? 1 : 0,\n        time: now,\n      };\n      requestsMap.set(url, { head: now, values: reqValues });\n    } else {\n      const currentVal = reqValues[diffFromHead];\n      reqValues[diffFromHead] = {\n        requests: incRequests ? currentVal.requests + 1 : currentVal.requests,\n        accepts: incAccepts ? currentVal.accepts + 1 : currentVal.accepts,\n        time: now,\n      };\n    }\n  }\n\n  return;\n};\n\n// Go through the entries and clean up all the ones that haven't been updated in the last 2.5 * [windowLength] seconds\nconst cleanUpOldEntries = (windowLength: number) => () => {\n  requestsMap.forEach(({ head }, key) => {\n    if (diffInSeconds(new Date(), head) > 2.5 * windowLength) {\n      requestsMap.delete(key);\n    }\n  });\n};\n\n/* --- */\n\n// Multiplier that determines aggressiveness of throttling\n// Higher value is less agressive, 2 is recommended\nconst defaultK = 2;\n\n// Determines how many seconds wide the requestWindow is.\n// Default is 120 seconds i.e rejection probability is based on how well the backend has been performing in the last 2 minutes\nconst defaultWindowLength = 120;\n\n// Determines how often requestsMap is cleaned (delete old keys), default 60 seconds\nconst defaultCleanUpFreq = 60;\n\nconst defaultOptions = {\n  K: defaultK,\n  windowLength: defaultWindowLength,\n  cleanupFrequency: defaultCleanUpFreq,\n};\n\nexport const throttler = ({\n  K = defaultK,\n  windowLength = defaultWindowLength,\n  cleanupFrequency = defaultCleanUpFreq,\n}: ThrottlerOptions = defaultOptions) => (url: string) => {\n  if (!cleanUpTaskId) {\n    // Setup cleanup job to run every minute if it hasn't already been setup\n    cleanUpTaskId = setInterval(\n      cleanUpOldEntries(windowLength),\n      cleanupFrequency * 1000\n    );\n  }\n\n  const now = new Date();\n  if (!requestsMap.has(url)) {\n    // If the requestsMap doesn't have an entry for the current url, create one\n    requestsMap.set(url, getTwoMinuteWindow(now, windowLength));\n  }\n  const requestWindow: RequestMapEntry = requestsMap.get(url)!;\n  const [requests, accepts] = getRequestValues(\n    requestWindow,\n    now,\n    windowLength\n  );\n\n  const chanceOfThrottle = Math.max(\n    0,\n    (requests - K * accepts) / (requests + 1)\n  );\n\n  if (Math.random() < chanceOfThrottle) {\n    return [true, (x: boolean) => x] as const;\n  }\n\n  return [\n    false,\n    (isSuccess: boolean) =>\n      updateRequestValues(url, now, windowLength, true, isSuccess),\n  ] as const;\n};\n\nconst throttledFetch = (throttleOptions: ThrottlerOptions) => (\n  url: string,\n  options: object = {},\n  applyThrottling: boolean = true,\n  removeQueryParams: boolean = true,\n  throttle400s: boolean = false\n) => {\n  let callOnComplete: any;\n  if (applyThrottling) {\n    let shouldThrottle;\n    const requestThrottler = throttler(throttleOptions);\n    [shouldThrottle, callOnComplete] = requestThrottler(\n      removeQueryParams ? sanitizeUrl(url) : url\n    );\n\n    if (shouldThrottle) {\n      return Promise.reject(new Error('The request was throttled.'));\n    }\n  }\n\n  const throttleThresholdCode = throttle400s ? 400 : 500;\n\n  return fetch(url, options)\n    .then((res: Response) => {\n      res?.status < throttleThresholdCode\n        ? callOnComplete(true)\n        : callOnComplete(false);\n      return res;\n    })\n    .catch((err: Error) => {\n      if (err.name === 'AbortError') {\n        throw err;\n      } else {\n        callOnComplete(false);\n        throw err;\n      }\n    });\n};\n\nexport default throttledFetch;\n"],"names":["fetch","require","sanitizeUrl","url","urlMinusQuery","split","diffInSeconds","a","b","Math","round","valueOf","requestsMap","Map","getTwoMinuteWindow","now","windowLength","head","values","Array","fill","requests","accepts","time","cleanUpTaskId","getRequestValues","reqWindow","reqValues","reduce","acc","updateRequestValues","incRequests","incAccepts","requestWindow","get","diffFromHead","set","currentVal","cleanUpOldEntries","forEach","key","Date","defaultK","defaultWindowLength","defaultCleanUpFreq","defaultOptions","K","cleanupFrequency","throttler","setInterval","has","chanceOfThrottle","max","random","x","isSuccess","throttledFetch","throttleOptions","options","applyThrottling","removeQueryParams","throttle400s","callOnComplete","shouldThrottle","requestThrottler","Promise","reject","Error","throttleThresholdCode","then","res","status","err","name"],"mappings":"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"}